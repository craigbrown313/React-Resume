{
  "_args": [
    [
      {
        "raw": "code-prettify@github:alex-milanov/code-prettify",
        "scope": null,
        "escapedName": "code-prettify",
        "name": "code-prettify",
        "rawSpec": "github:alex-milanov/code-prettify",
        "spec": "github:alex-milanov/code-prettify",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:alex-milanov/code-prettify.git",
          "sshUrl": "git+ssh://git@github.com/alex-milanov/code-prettify.git",
          "httpsUrl": "git+https://github.com/alex-milanov/code-prettify.git",
          "gitUrl": "git://github.com/alex-milanov/code-prettify.git",
          "shortcut": "github:alex-milanov/code-prettify",
          "directUrl": "https://raw.githubusercontent.com/alex-milanov/code-prettify/master/package.json"
        }
      },
      "C:\\Users\\crabro02\\Desktop\\res12\\node_modules\\react-code-prettify"
    ]
  ],
  "_from": "alex-milanov/code-prettify",
  "_id": "code-prettify@1.0.0",
  "_inCache": true,
  "_location": "/code-prettify",
  "_phantomChildren": {},
  "_requested": {
    "raw": "code-prettify@github:alex-milanov/code-prettify",
    "scope": null,
    "escapedName": "code-prettify",
    "name": "code-prettify",
    "rawSpec": "github:alex-milanov/code-prettify",
    "spec": "github:alex-milanov/code-prettify",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:alex-milanov/code-prettify.git",
      "sshUrl": "git+ssh://git@github.com/alex-milanov/code-prettify.git",
      "httpsUrl": "git+https://github.com/alex-milanov/code-prettify.git",
      "gitUrl": "git://github.com/alex-milanov/code-prettify.git",
      "shortcut": "github:alex-milanov/code-prettify",
      "directUrl": "https://raw.githubusercontent.com/alex-milanov/code-prettify/master/package.json"
    }
  },
  "_requiredBy": [
    "/react-code-prettify"
  ],
  "_resolved": "git://github.com/alex-milanov/code-prettify.git#ae9d5fbeb82870026456946b1934f2b876bb4525",
  "_shasum": "bbb3ac92e2b54c3cda21df6815aac64357204d2b",
  "_shrinkwrap": null,
  "_spec": "code-prettify@github:alex-milanov/code-prettify",
  "_where": "C:\\Users\\crabro02\\Desktop\\res12\\node_modules\\react-code-prettify",
  "author": {
    "name": "Google"
  },
  "bugs": {
    "url": "https://github.com/google/code-prettify/issues"
  },
  "contributors": [
    {
      "name": "Amro",
      "email": "amroamroamro@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "Google Code Prettify",
  "devDependencies": {
    "google-closure-compiler": "^20161201.0.0",
    "grunt": "^1.0.1",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-compress": "^1.3.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-cssmin": "^1.0.2",
    "grunt-contrib-uglify": "^2.0.0",
    "grunt-preprocess": "^5.1.0",
    "html-to-text": "^3.0.0",
    "zombie": "^5.0.5"
  },
  "directories": {
    "lib": "src",
    "doc": "docs",
    "example": "examples",
    "test": "tests"
  },
  "files": [
    "loader/",
    "src/",
    "styles/*.css",
    "COPYING"
  ],
  "gitHead": "ae9d5fbeb82870026456946b1934f2b876bb4525",
  "homepage": "https://github.com/google/code-prettify",
  "keywords": [
    "syntax",
    "highlight",
    "highlighting",
    "source",
    "code",
    "prettify",
    "google"
  ],
  "license": "Apache-2.0",
  "main": "src/node_prettify.js",
  "maintainers": [
    {
      "name": "Mike Samuel",
      "email": "mikesamuel@gmail.com"
    }
  ],
  "name": "code-prettify",
  "optionalDependencies": {},
  "readme": "# JavaScript code prettifier\r\n\r\nAn embeddable script that makes source-code snippets in HTML prettier.\r\n\r\n* Works on HTML pages.\r\n* Works even if code contains embedded links, line numbers, etc.\r\n* Simple API: include some JS & CSS and add an onload handler.\r\n* Lightweights: small download and does not block page from loading while\r\n  running.\r\n* Customizable styles via CSS. See the [themes gallery][1].\r\n* Supports all C-like, Bash-like, and XML-like languages. No need to specify\r\n  the language.\r\n* Extensible language handlers for other languages. You can specify the\r\n  language.\r\n* Widely used with good cross-browser support. Powers https://code.google.com/\r\n  and http://stackoverflow.com/\r\n\r\n[See an example][2].\r\n\r\n## Setup\r\n\r\n * Include the script tag below in your document:\r\n```HTML\r\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\r\n```\r\n * See [Getting Started](docs/getting_started.md) to configure that URL with\r\n   options you need.\r\n * Look at the [skin gallery][1] and pick styles that suit you.\r\n\r\n## Usage\r\n\r\nPut code snippets in `<pre class=\"prettyprint\">...</pre>` or\r\n`<code class=\"prettyprint\">...</code>` and it will automatically be\r\npretty-printed.\r\n\r\n```HTML\r\n<pre class=\"prettyprint\">class Voila {\r\npublic:\r\n  // Voila\r\n  static const string VOILA = \"Voila\";\r\n\r\n  // will not interfere with embedded <a href=\"#voila2\">tags</a>.\r\n}</pre>\r\n```\r\n\r\n## FAQ\r\n\r\n### For which languages does it work?\r\n\r\nThe comments in `prettify.js` are authoritative but the lexer should work on a\r\nnumber of languages including C and friends, Java, Python, Bash, SQL, HTML,\r\nXML, CSS, JavaScript, Makefile, and Rust.\r\n\r\nIt works passably on Ruby, PHP, VB, and Awk and a decent subset of Perl and\r\nRuby, but because of commenting conventions, doesn't work on Smalltalk, OCaml,\r\netc. without a language extension.\r\n\r\nOther languages are supported via extensions:\r\n\r\n[Apollo](src/lang-apollo.js);\r\n[Basic](src/lang-basic.js);\r\n[Clojure](src/lang-clj.js);\r\n[CSS](src/lang-css.js);\r\n[Dart](src/lang-dart.js);\r\n[Erlang](src/lang-erlang.js);\r\n[Go](src/lang-go.js);\r\n[Haskell](src/lang-hs.js);\r\n[Lasso](src/lang-lasso.js);\r\n[Lisp, Scheme](src/lang-lisp.js);\r\n[LLVM](src/lang-llvm.js);\r\n[Logtalk](src/lang-logtalk.js);\r\n[Lua](src/lang-lua.js);\r\n[MATLAB](src/lang-matlab.js);\r\n[MLs: F#, Ocaml,SML](src/lang-ml.js);\r\n[Mumps](src/lang-mumps.js);\r\n[Nemerle](src/lang-n.js);\r\n[Pascal](src/lang-pascal.js);\r\n[Protocol buffers](src/lang-proto.js);\r\n[R, S](src/lang-r.js);\r\n[RD](src/lang-rd.js);\r\n[Rust](src/lang-rust.js);\r\n[Scala](src/lang-scala.js);\r\n[SQL](src/lang-sql.js);\r\n[Swift](src/lang-swift.js);\r\n[TCL](src/lang-tcl.js);\r\n[LaTeX](src/lang-tex.js);\r\n[Visual Basic](src/lang-vb.js);\r\n[VHDL](src/lang-vhdl.js);\r\n[Wiki](src/lang-wiki.js);\r\n[XQ](src/lang-xq.js);\r\n[YAML](src/lang-yaml.js)\r\n\r\nIf you'd like to add an extension for your favorite language, please look at\r\n`src/lang-lisp.js` and submit a pull request.\r\n\r\n### How do I specify the language of my code?\r\n\r\nYou don't need to specify the language since `PR.prettyPrint()` will guess.\r\nYou can specify a language by specifying the language extension along with the\r\n`prettyprint` class:\r\n\r\n```HTML\r\n<pre class=\"prettyprint lang-html\">\r\n  The lang-* class specifies the language file extensions.\r\n  File extensions supported by default include:\r\n    \"bsh\", \"c\", \"cc\", \"cpp\", \"cs\", \"csh\", \"cyc\", \"cv\", \"htm\", \"html\", \"java\",\r\n    \"js\", \"m\", \"mxml\", \"perl\", \"pl\", \"pm\", \"py\", \"rb\", \"sh\", \"xhtml\", \"xml\",\r\n    \"xsl\".\r\n</pre>\r\n```\r\n\r\nYou may also use the [HTML 5][3] convention of embedding a `<code>` element\r\ninside the `<pre>` and using `language-java` style classes:\r\n\r\n```HTML\r\n<pre class=\"prettyprint\"><code class=\"language-java\">...</code></pre>\r\n```\r\n\r\n### It doesn't work on \"obfuscated code sample\"?\r\n\r\nYes. Prettifying obfuscated code is like putting lipstick on a pig &mdash;\r\ni.e. outside the scope of this tool.\r\n\r\n### Which browsers does it work with?\r\n\r\nIt's been tested with IE 6, Firefox 1.5 & 2, and Safari 2.0.4. Look at\r\n[the tests][4] to see if it works in your browser.\r\n\r\n### What's changed?\r\n\r\nSee the [changelog](CHANGES.md).\r\n\r\n### Why doesn't Prettyprinting of strings work on WordPress?\r\n\r\nApparently wordpress does \"smart quoting\" which changes close quotes.  This\r\ncauses end quotes to not match up with open quotes.\r\n\r\nThis breaks prettifying as well as copying and pasting of code samples.  See\r\n[WordPress's help center][5] for info on how to stop smart quoting of code\r\nsnippets.\r\n\r\n### How do I put line numbers in my code?\r\n\r\nYou can use the `linenums` class to turn on line numbering.  If your code\r\ndoesn't start at line number `1`, you can add a colon and a line number to the\r\nend of that class as in `linenums:52`. For example:\r\n\r\n```HTML\r\n<pre class=\"prettyprint linenums:4\"\r\n>// This is line 4.\r\nfoo();\r\nbar();\r\nbaz();\r\nboo();\r\nfar();\r\nfaz();\r\n</pre>\r\n```\r\n\r\n### How do I prevent a portion of markup from being marked as code?\r\n\r\nYou can use the `nocode` class to identify a span of markup that is not code:\r\n\r\n```HTML\r\n<pre class=\"prettyprint\">\r\nint x = foo();  /* This is a comment  <span class=\"nocode\">This is not code</span>\r\n  Continuation of comment */\r\nint y = bar();\r\n</pre>\r\n```\r\n\r\nFor a more complete example see the [issue #22 testcase][6].\r\n\r\n### I get an error message \"a is not a function\" or \"opt_whenDone is not a function\"\r\n\r\nIf you are calling `prettyPrint` via an event handler, wrap it in a function.\r\nInstead of doing:\r\n\r\n```JavaScript\r\naddEventListener('load', PR.prettyPrint, false);\r\n```\r\n\r\nwrap it in a closure like:\r\n\r\n```JavaScript\r\naddEventListener('load', function(event) { PR.prettyPrint(); }, false);\r\n```\r\n\r\nso that the browser does not pass an event object to `PR.prettyPrint`\r\nwhich will confuse it.\r\n\r\n### How can I customize the colors and styles of my code?\r\n\r\nPrettify adds `<span>` with `class`es describing the kind of code.  You can\r\ncreate CSS styles to matches these classes.\r\n\r\nSee the [theme gallery][1] for examples.\r\n\r\n### I can't add classes to my code (because it comes from Markdown, etc.)\r\n\r\nInstead of `<pre class=\"prettyprint ...\">` you can use a comment or processing\r\ninstructions that survives processing instructions: `<?prettify ...?>` works\r\nas explained in [Getting Started](docs/getting_started.md).\r\n\r\n### How can I put line numbers on every line instead of just every fifth line?\r\n\r\nPrettify puts lines into an HTML list element so that line numbers aren't\r\ncaught by copy/paste, and the line numbering is controlled by CSS in the\r\ndefault stylesheet, `prettify.css`.\r\n\r\nThe following should turn line numbering back on for the other lines:\r\n\r\n```HTML\r\n<style>\r\nli.L0, li.L1, li.L2, li.L3,\r\nli.L5, li.L6, li.L7, li.L8 {\r\n  list-style-type: decimal !important;\r\n}\r\n</style>\r\n```\r\n\r\n## Discussion\r\n\r\nPlease use the official [support group][7] for discussions, suggestions, and\r\ngeneral feedback.\r\n\r\n## License\r\n\r\n[Apache License 2.0](COPYING)\r\n\r\n\r\n[1]: https://rawgit.com/google/code-prettify/master/styles/index.html\r\n[2]: https://rawgit.com/google/code-prettify/master/examples/quine.html\r\n[3]: http://dev.w3.org/html5/spec-author-view/the-code-element.html#the-code-element\r\n[4]: https://rawgit.com/google/code-prettify/master/tests/prettify_test.html\r\n[5]: http://wordpress.org/support/topic/125038\r\n[6]: https://rawgit.com/google/code-prettify/master/tests/prettify_test.html#issue22\r\n[7]: http://groups.google.com/group/js-code-prettifier\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/google/code-prettify.git"
  },
  "scripts": {
    "grunt": "grunt",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.0"
}
